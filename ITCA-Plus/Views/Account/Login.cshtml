
@{
    ViewBag.Title = "Iniciar Sesión";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
}

@model ITCA_Plus.Models.Usuarios

@if (ViewBag.mensaje != null)
{
    <script>
        const mensaje = @Html.Raw(Json.Encode(ViewBag.mensaje));
        Swal.fire({
            icon: 'info',
            title: '¡Informacion!',
            text: mensaje,
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#3085d6'
        });
    </script>
}

<main class="container d-flex align-items-center justify-content-center min-vh-100">
    <div class="card shadow border-0 p-4 rounded-4" style="max-width: 450px; width: 100%;">
        <div class="card-body">
            <h3 class="text-center mb-4">Bienvenido</h3>
            <p class="text-center text-muted mb-4">Inicia sesión para continuar</p>

            @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { id = "loginForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    @Html.LabelFor(m => m.correo, "Código de cuenta", new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                        @Html.TextBoxFor(m => m.correo, new { @class = "form-control", placeholder = "Código de cuenta", style = "max-width: none" })
                    </div>
                    @Html.ValidationMessageFor(m => m.correo, "", new { @class = "text-danger small" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.contrasena, "Contraseña", new { @class = "form-label" })
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                        @Html.PasswordFor(m => m.contrasena, new { @class = "form-control", id = "passwordInput", placeholder = "Contraseña" })
                        <button class="btn btn-outline-secondary" type="button" id="togglePassword" tabindex="-1" title="Mostrar/Ocultar contraseña">
                            <i class="bi bi-eye"></i>
                        </button>
                    </div>
                    @Html.ValidationMessageFor(m => m.contrasena, "", new { @class = "text-danger small" })
                </div>
                <div class="d-flex justify-content-between align-items-center mb-3">
                    
                    <a href="@Url.Action("ResEnvio", "Account")" class="text-decoration-none small">¿Olvidaste tu contraseña?</a>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary rounded-pill">
                        <i class="bi bi-box-arrow-in-right me-2"></i> Iniciar Sesión
                    </button>
                </div>
            }


            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger mt-3 text-center">
                    @ViewBag.Error
                </div>
            }
        </div>
    </div>
</main>


<script>
    $(document).ready(function () {
        $('#togglePassword').click(function () {
            const passwordInput = $('#passwordInput');
            const type = passwordInput.attr('type') === 'password' ? 'text' : 'password';
            passwordInput.attr('type', type);
            // Cambiar ícono según estado
            $(this).find('i').toggleClass('bi-eye bi-eye-slash');
        });
    });
</script>